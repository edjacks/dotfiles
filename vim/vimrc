" ======================================================================================
" vim-plug
" ======================================================================================
try
    source ~/.vim/vim-plug.vim
catch
endtry

if !exists("g:os")
    if has("win64") || has("win32") || has("win16")
        let g:os = "Windows"
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

" ======================================================================================
" Standard vim options
" ======================================================================================
syntax on
filetype plugin indent on
set binary                                    " Enable binary support
set title
set hlsearch
set omnifunc=syntaxcomplete#Complete
set path+=**
set smartindent
set autoindent
set termencoding=utf-8
set encoding=utf-8

" Search
set incsearch                                 " incremental search
set ignorecase                                " ignore case in searching
set smartcase                                 " don't ignore case if capital letters present

set backspace=indent,eol,start                " makes backspace working

set sidescrolloff=3                           " Keep at least 3 lines left/right
set scrolloff=3                               " Keep at least 3 lines above/below

set nostartofline
set ttyfast
set lazyredraw
set gdefault                                  " search/replace globally (on a line) by default
set splitright                                " Open split on right, not left
set splitbelow                                " Open split below, not above
set wildmenu
set wildmode=longest:full,list:full
set completeopt=longest,menuone
set noshowmode                                " Airline shows mode, so hide default mode
set nobackup                                  " Don't need backup and swap files
set noswapfile
set pumheight=15                              " Completion menu height
set number                                    " line numbers
set laststatus=2                              " Always show status line
set shiftround                                " Round off shift width when using >
set timeout timeoutlen=1000 ttimeoutlen=100
set wrapscan
set autoread                                  " automatically reload files changed outside of Vim
set showcmd
set hidden
set diffopt+=context:5,vertical               " 5 lines of context in diff mode
set shortmess=atToOIc                         " To avoid the 'Hit Enter' prompts caused by the file messages
set updatetime=750                            " Vim refresh time
set linebreak                                 " It maintains the whole words when wrapping
set cpoptions-=m                              " Highlight when CursorMoved.
set cpoptions+=I
set matchtime=1
set visualbell t_vb=                          " Disable bells
set shell=bash
set fileformats="unix,dos,mac"
set csverb
set cscopetag
set previewheight=20
set conceallevel=2
set listchars=tab:▸\ ,trail:-,extends:>,precedes:<,nbsp:⎵

" Joining
set nojoinspaces                " Only one space when joining lines
set formatoptions+=j            " Remove comment leader when joining lines

if $TMUX == ''
    set clipboard+=unnamed
endif

if has('nvim')
    set inccommand=nosplit
endif

set list
set mouse=a

if exists("&wildignorecase")
    set wildignorecase
endif

if exists("&relativenumber")
    set relativenumber
endif

let &t_ZH="\e[3m"
let &t_ZR="\e[23m"

if has('termguicolors')
    set termguicolors
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
endif

let g:mapleader = "\<Space>"

nnoremap ,/ :nohlsearch<CR>
" Jump to start of function
nnoremap ]] ]m
nnoremap ]] ]m

nnoremap G :norm! Gzz<CR>

nmap <C-g>g :Gstatus<CR>gg<C-n>
nmap <C-g>d :Gdiff<CR>
nmap <C-g>b :Gblame<CR>

" Grep for word under the cursor
" Otherwise search all subdirectories
nnoremap <Leader>VV yiw:silent Ack! <cword><CR>:/<C-R>0<CR>
vnoremap <Leader>VV y:silent Ack! "<C-R>0"<CR>:/<C-R>0<CR>

" Specific search: whole words only
nnoremap <Leader>vv yiw:silent Ack! -w <cword><CR>:/<C-R>0<CR>
vnoremap <Leader>vv y:silent Ack! -w "<C-R>0"<CR>:/<C-R>0<CR>

" Easier movement in visual mode
vnoremap > >gv
vnoremap < <gv

" Don't add a newline when preview window is visible
inoremap <silent><expr> <CR> pumvisible() ? "<C-y>" : "<C-g>u<CR>"

" Make Y behave like other motion characters
nnoremap Y y$

" Backspace in normal mode switches to last buffer
nnoremap <BS> :buffer #<CR>

" Expand matching braces only when pressing Enter
" inoremap {<CR> {<CR>}<Esc>==ko

" Don't let x and c to spoil the yank register
nnoremap x "_x
nnoremap c "_c

" back tick is more powerful, but harder to reach
noremap ' `
noremap ` '

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Next/prev quick-fix results
nnoremap <expr> <silent> <leader>j (&diff ? "]c" : ":cnext\<CR>")
nnoremap <expr> <silent> <leader>k (&diff ? "[c" : ":cprev\<CR>")

function! QuitBuffer()
  if &buftype == 'quickfix'
    q
    return
  endif

  let l:nbuf = len(getbufinfo({'buflisted':1}))

  if l:nbuf > 2
    BD
  elseif l:nbuf == 2
    bd
  else
    q
  endif

endfunction

" Quicker save and quit
nnoremap <silent> e :call QuitBuffer()<CR>
nnoremap <silent> w :update<CR>
inoremap <silent> jj <Esc>

" Paste in insert mode
inoremap <C-p> <C-r>0

" Easier to get command prompt
nnoremap ; :
vnoremap ; :

" x in Insert mode
inoremap <C-d> <C-o>x

" Jump to start and end of line using the home row keys
nmap 0 ^

" Move by 'display lines' rather than 'logical lines' if no v:count was
" provided.  When a v:count is provided, move by logical lines.
nnoremap <expr> j v:count > 0 ? 'j' : 'gj'
xnoremap <expr> j v:count > 0 ? 'j' : 'gj'
nnoremap <expr> k v:count > 0 ? 'k' : 'gk'
xnoremap <expr> k v:count > 0 ? 'k' : 'gk'

nnoremap <leader>l :call NumberToggle()<CR>

" Add a heading/subheading to current line
nnoremap <leader>= yypVr=<Esc>==
nnoremap <leader>- yypVr-<Esc>==

" Go to end of yanked/pasted text
vnoremap <silent> y y`]
nnoremap <silent> p ]p`]
vnoremap <silent> p ]p`]
nnoremap <silent> P [p`]
vnoremap <silent> P [p`]
" }}

" Commit and push {{
function! s:CommitPush(...)
    if a:0 > 0
        execute "Gcommit -am '" . join(a:000) . "'"
    else
        :Gcommit -am "update notes"
    endif

    :Gpush
endfunction

command! -nargs=? CommitPush call s:CommitPush(<f-args>)

" quickr-cscope.vim
let g:quickr_cscope_program = "gtags-cscope"
let g:quickr_cscope_db_file = "GTAGS"

" ======================================================================================
" UpdateGlobalDB()
" Incrementally update the database generated by GNU GLOBAL
" ======================================================================================
function! UpdateGlobalDB()
      try
          silent! execute '!gtags -i &'
      catch
      endtry
endfunction

let g:quickr_cscope_autoload_db = 1
let g:quickr_cscope_use_qf_g = 1
let g:quickr_cscope_debug_mode = 0

" ======================================================================================
" Strip trailing whitespaces
" ======================================================================================
function! StripTrailingWhite()
    let l:winview = winsaveview()
    silent! %s/\s\+$//
    call winrestview(l:winview)
endfunction

" ======================================================================================
" Auto commands
" ======================================================================================

"augroup CursorLineOnlyInActiveWindow
  "autocmd!
  "autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  "autocmd WinLeave * setlocal nocursorline
"augroup END

if has("autocmd")"
    " Enable spell checking
    autocmd FileType gitcommit setlocal spell
    autocmd FileType markdown setlocal spell
    autocmd FileType text setlocal spell
    autocmd FileType rst setlocal spell

    augroup mycommands
        autocmd!
        autocmd BufWritePre * call StripTrailingWhite()

        " omnifuncs
        autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType java setlocal omnifunc=javacomplete#Complete
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType c set omnifunc=ccomplete#Complete
        autocmd FileType cpp set omnifunc=omni#cpp#complete#Main

        " Remember cursor position between vim sessions
        autocmd BufReadPost *
                    \ if line("'\"") > 1 && line("'\"") <= line("$") |
                    \   exe "normal! g`\"" |
                    \ endif

        " Update diff when leaving from insertmode or writing to file
        autocmd BufWritepost * if &diff == 1 | diffupdate | endif
        if g:quickr_cscope_program == "gtags-cscope"
            " Update GLOBAL database after file is written
            autocmd BufWritePost *.c call UpdateGlobalDB()
            autocmd BufWritePost *.cpp call UpdateGlobalDB()
            autocmd BufWritePost *.h call UpdateGlobalDB()
            autocmd User QfReplacementBufWritePost doautocmd BufWritePost
        endif

        autocmd BufWritePost $MYVIMRC,vimrc source $MYVIMRC | AirlineRefresh

        " Use shell syntax for .conf files
        autocmd BufRead,BufNewFile *.conf set syntax=sh

        " Open the result from quickfix window and close the quickfix window
        autocmd FileType qf nnoremap <buffer> o <CR>:cclose<CR>

        " Open help in vertical split
        autocmd FileType help wincmd L

        if has('nvim')
            au BufEnter * if &buftype == 'terminal' | :startinsert | endif
        endif

    augroup END
endif

function! NumberToggle()
    if(&relativenumber == 1 && &number == 1)
        set number
        set norelativenumber
    elseif (&number == 1 && &relativenumber == 0)
        set norelativenumber
        set nonumber
    else
        set number
        set relativenumber
    endif
endfunction

if &diff
    nnoremap e :qa<CR>
    nnoremap w :wa<CR>
    set nonu
    set nornu
endif

set tags=./tags;/   " ctags path, search upwards till tags file is found

"================= Colorscheme =============================

set background=dark
let g:gruvbox_italic = 1
let g:gruvbox_bold = 0
let g:gruvbox_underline = 1
let g:gruvbox_undercurl = 1
let g:gruvbox_contrast_dark = 'medium'
let g:gruvbox_invert_selection = 0
"let g:gruvbox_improved_strings = 1
"let g:gruvbox_improved_warnings = 1
colorscheme gruvbox
"hi CursorLine guibg=#1d2021
"hi CursorLineNr guibg=#1d2021
hi LineNr guibg=#1d2021
"hi DiffAdd guibg=#98c379 guifg=black gui=italic
"hi DiffDelete guibg=#e06c75 guifg=black
"hi DiffChange guibg=#61afef guifg=black
"hi DiffText guibg=#e5c07b guifg=black gui=italic

let g:airline#extensions#tabline#enabled                      = 1
let g:airline#extensions#tabline#buffer_min_count             = 1
let g:airline#extensions#tabline#tab_min_count                = 1
let g:airline#extensions#tabline#buffer_idx_mode              = 1
let g:airline#extensions#tabline#buffer_nr_show               = 0
let g:airline#extensions#tabline#show_buffers                 = 1
let g:airline#extensions#branch#enabled                       = 1
let g:airline#extensions#tagbar#enabled                       = 0
let g:airline_powerline_fonts                                 = 1
let g:airline#extensions#whitespace#enabled       = 0
let g:airline#extensions#tabline#fnamemod         = ':t'
let g:airline_theme                               = 'hybrid'
let g:airline_section_c                           = '%{fnamemodify(expand("%"), ":~:.")}'
let g:airline_section_x                           = '%{fnamemodify(getcwd(), ":t")}'
let g:airline_section_y                           = airline#section#create(['filetype'])
" Easier tab/buffer switching
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

nnoremap <silent> <leader>p :FZF --no-reverse<CR>
nnoremap <silent> <leader>b :Tags<CR>
nnoremap b :Buffers<CR>


" Change cursor shape based on mode.
if has('nvim')
    "set guicursor=n-v-c:block-Cursor/lCursor-blinkon0,i-ci:ver25-Cursor/lCursor,r-cr:hor20-Cursor/lCursor
else
    set t_ut=
    set gcr=a:blinkon0
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
endif

try
    source ~/.vimrc_work
catch
endtry

let g:startify_list_order = [['Most recently used files in current directory:'], 'dir',
            \                ['Most recently used file on the system:'], 'files',
            \                ['Sessions:'], 'sessions',
            \                ['Bookmarks:'], 'bookmarks']
let g:startify_change_to_dir = 0
let g:startify_files_number = 7
let g:startify_enable_unsafe = 1
let g:startify_skiplist = [
            \ '.CC',
            \ ]

let g:ackprg = 'ag --vimgrep --smart-case --ignore=tags'
let g:ack_apply_qmappings = 0
let g:ack_apply_lmappings = 0

if filereadable(".vim.custom")
    so .vim.custom
endif

function! ZoomToggle() abort
    if exists('t:zoomed') && t:zoomed
        execute t:zoom_winrestcmd
        let t:zoomed = 0
    else
        let t:zoom_winrestcmd = winrestcmd()
        resize
        vertical resize
        let t:zoomed = 1
    endif
endfunction
nnoremap <silent> <C-a> :call ZoomToggle()<CR>

if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
    set undolevels=1000
    set undoreload=10000
endif
" focus when open
let g:undotree_SetFocusWhenToggle = 1
" relative timestamp
let g:undotree_RelativeTimestamp = 1

let g:jedi#use_splits_not_buffers = "right"
let g:jedi#completions_enabled = 0

let g:indentLine_setColors = 1
let g:indentLine_leadingSpaceChar = '·'
let g:indentLine_char = '│'

let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_folding = 0
let g:pymode_options_max_line_length = 119
let g:pymode_rope = 0
let g:pymode_lint_cwindow = 1
let g:pymode_virtualenv = 1
let g:pymode_options_colorcolumn = 0
let g:pymode_lint_cwindow = 0

let g:clever_f_ignore_case = 1
let g:clever_f_smart_case = 1
let g:clever_f_fix_key_direction = 1

let g:NERDCreateDefaultMappings = 0
let g:NERDRemoveExtraSpaces = 0
nmap gc <plug>NERDCommenterToggle
vmap gc <plug>NERDCommenterSexy
map gx <plug>NERDCommenterToggle

command! -nargs=+ Silent
            \ | execute ':silent !'.<q-args>
            \ | execute ':redraw!'

nnoremap <C-s> :Silent bash<CR>

nmap K <plug>(Vman)

let g:EasyMotion_smartcase = 1
nmap s <Plug>(easymotion-s2)

let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_conceal = 0

let g:vim_json_syntax_conceal = 0

if has('nvim')
    " Use deoplete.
    let g:deoplete#enable_at_startup = 1

    nnoremap <C-b> :vs term://bash<CR>

    " Window navigation function
    " Make ctrl-h/j/k/l move between windows and auto-insert in terminals
    func! s:mapMoveToWindowInDirection(direction)
        func! s:maybeInsertMode(direction)
            stopinsert
            execute "wincmd" a:direction

            if &buftype == 'terminal'
                startinsert!
            endif
        endfunc

        execute "tnoremap" "<silent>" "<C-" . a:direction . ">"
                    \ "<C-\\><C-n>"
                    \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
        execute "nnoremap" "<silent>" "<C-" . a:direction . ">"
                    \ ":call <SID>maybeInsertMode(\"" . a:direction . "\")<CR>"
    endfunc

    for dir in ["h", "j", "l", "k"]
        call s:mapMoveToWindowInDirection(dir)
    endfor
    tnoremap <esc><esc> <C-\><C-n>

    " deoplete-clang {{
    if g:os == "Darwin"
        let g:deoplete#sources#clang#libclang_path = "/usr/local/cellar/llvm/4.0.0_1/lib/libclang.dylib"
        let g:deoplete#sources#clang#clang_header = "/usr/local/Cellar/llvm/4.0.0_1/lib/clang"
        let g:chromatica#libclang_path="/usr/local/cellar/llvm/4.0.0_1/lib/libclang.dylib"
    else
        let g:deoplete#sources#clang#libclang_path = "/usr/lib/llvm-3.8/lib/libclang.so.1"
        let g:deoplete#sources#clang#clang_header = "/usr/lib/llvm-3.8/lib/clang"
        let g:chromatica#libclang_path="/usr/lib/llvm-3.8/lib/libclang.so.1"
    endif
    let g:deoplete#sources#clang#sort_algo = 'priority'
    " }}
endif

command! -bang -nargs=* Ag
            \ call fzf#vim#ag(<q-args>,
            \                 <bang>0 ? fzf#vim#with_preview('up:60%')
            \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
            \                 <bang>0)

command! -bang -nargs=* Rg
            \ call fzf#vim#grep(
            \   'rg --column --line-number --no-heading --color=always '.shellescape(<q-args>), 1,
            \   <bang>0 ? fzf#vim#with_preview('up:60%')
            \           : fzf#vim#with_preview('right:50%:hidden', '?'),
            \   <bang>0)

let g:UltiSnipsSnippetsDir="~/.config/nvim/UltiSnips"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEditSplit="vertical"
let g:SuperTabContextDefaultCompletionType = "<c-n>"
let g:SuperTabDefaultCompletionType = "<c-n>"

let g:tmux_navigator_disable_when_zoomed = 1

let g:neoformat_enabled_python = ['autopep8']
let g:neoformat_try_formatprg = 1
let g:neoformat_only_msg_on_error = 1
au FileType python setlocal formatprg=autopep8\ -

function! s:lost()
    " https://git.savannah.gnu.org/cgit/diffutils.git/tree/src/diff.c?id=eaa2a24#n464
    let found = search('\v^[[:alpha:]$_]', "bn", 1, 100)
    if found > 0
        let line = getline(found)
        echom line
    else
        echom '?'
    endif
endfunction
command! -bar Lost call s:lost()

nnoremap <silent> gL :Lost<Cr>
nnoremap <C-d> :ZoomToggle<CR>:Gdiff<CR>

let g:ale_lint_on_text_changed = 'never'
highlight ALEErrorSign guibg=red guifg=yellow
highlight ALEWarningSign guibg=blue guifg=yellow

let g:deoplete#enable_at_startup = 1
let g:deoplete#omni_patterns = {}
let g:deoplete#omni_patterns.java = '[^. *\t]\.\w*'
let g:deoplete#sources = {}
let g:deoplete#sources._ = []
let g:deoplete#file#enable_buffer_path = 1
let g:JavaComplete_LibsPath = '/opt/maglev/sw/apps/javacontainer/lib'

let g:loaded_gentags#ctags = 1
let g:gen_tags#gtags_auto_gen = 1

" ======================================================================================
" vim-signify
" ======================================================================================
let g:signify_sign_delete            = '-'

" ======================================================================================
" vim-clang-format
" ======================================================================================
let g:clang_format#auto_format = 0

nnoremap <leader>n :Buffers<CR>
